#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
    tapping-term-ms = <250>;
};

&lt { tapping-term-ms = <120>; };

&trackball {
    // automouse-layer = <4>;

    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        // rgui {
        //     bindings = <&kp RGUI>;
        //     key-positions = <19 20>;
        //     layers = <0 1 2>;
        // };

        // ralt {
        //     bindings = <&kp RALT>;
        //     key-positions = <18 20>;
        //     layers = <0 1 2>;
        // };

        // rctrl {
        //     bindings = <&kp LCTRL>;
        //     key-positions = <18 19>;
        //     layers = <0 1 2>;
        // };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        td_lang: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LANG2>, <&kp LANG1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC      &kp W            &kp U         &kp F         &kp Q                                            &kp Z        &kp M       &lt 5 R      &lt 4 G      &kp P
&mt LSHFT A  &mt LCTRL I      &mt LALT E    &mt LGUI O    &kp SQT      &kp LG(KP_N0)        &kp PAGE_UP    &kp D        &mt RGUI T  &mt RALT N   &mt RCTRL S  &mt RSHFT Y
&kp SEMI     &kp X            &lt 5 C       &lt 4 V       &kp GRAVE    &lt 3 COLON          &kp PAGE_DOWN  &kp B        &kp H       &kp J        &kp K        &kp L
&none        &mt LCTRL COMMA  &mt LALT DOT  &mt LGUI TAB  &lt 2 SPACE  &mt LSHFT MINUS      &kp BSPC       &lt 1 ENTER                           &kp TAB
            >;

            sensor-bindings = <&inc_dec_kp LG(MINUS) LG(EQUAL)>;
        };

        NUM {
            bindings = <
&kp N1           &kp N2           &kp N3        &kp N4       &kp N5                               &kp N6     &kp N7     &kp N8     &kp N9     &kp N0
&mt LSHFT KP_N1  &kp KP_N2        &kp KP_N3     &kp KP_N4    &kp KP_N5    &kp K_MUTE      &trans  &kp KP_N6  &kp KP_N7  &kp KP_N8  &kp KP_N9  &mt RSHFT KP_N0
&kp SLASH        &kp KP_MULTIPLY  &kp KP_MINUS  &kp KP_PLUS  &kp PERCENT  &trans          &trans  &kp EQUAL  &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT
&trans           &trans           &trans        &trans       &trans       &trans          &trans  &trans                                      &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        SIGN {
            bindings = <
&none          &kp QMARK  &none      &none      &none                           &none      &kp PIPE  &kp KP_MINUS  &kp LPAR  &kp RPAR
&kp EXCL       &kp AT     &kp HASH   &kp DLLR   &kp PRCNT  &trans      &trans   &kp CARET  &kp AMPS  &kp STAR      &kp LBKT  &kp RBKT
&kp BACKSLASH  &none      &none      &td_lang   &kp CAPS   &trans      &trans   &kp EQUAL  &kp LT    &kp GT        &kp LBRC  &kp RBRC
&trans         &trans     &trans     &trans     &trans     &trans      &kp DEL  &trans                                       &trans
            >;
        };

        FUNCTION {
            bindings = <
&kp F1           &kp F2           &kp F3         &kp F4       &kp F5                      &kp F6         &kp F7         &kp F8         &kp F9  &kp F10
&kp LS(LG(F12))  &kp LA(LS(F12))  &kp LS(LA(H))  &kp LG(F12)  &trans  &trans      &trans  &kp RG(KP_N0)  &kp RG(MINUS)  &kp RG(EQUAL)  &trans  &kp F11
&trans           &trans           &trans         &trans       &trans  &trans      &trans  &kp K_MUTE     &kp C_VOL_DN   &kp C_VOL_UP   &trans  &kp F12
&trans           &trans           &trans         &trans       &trans  &trans      &trans  &trans                                               &kp F13
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &mkp MB4  &mkp MB5  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        BLUETOOTH {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        bluetooth {
            if-layers = <1 2>;
            then-layer = <6>;
        };
    };
};
