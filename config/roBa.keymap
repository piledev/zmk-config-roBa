#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        right_opt {
            bindings = <&kp RALT>;
            key-positions = <19 20>;
            layers = <0>;
        };

        right_ctrl {
            bindings = <&kp RCTRL>;
            key-positions = <20 21>;
            layers = <0>;
        };

        right_gui {
            bindings = <&kp RGUI>;
            key-positions = <18 19>;
            layers = <0>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <7 8>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC       &kp W     &kp U     &kp F      &kp Q                                                &kp Z        &kp M  &kp R  &kp G    &kp P
&mt LSHIFT A  &lt 4 I   &kp E     &kp O      &kp SQT      &kp LG(KP_N0)         &kp GRAVE         &kp D        &kp T  &kp N  &lt 5 S  &mt RIGHT_SHIFT Y
&kp SLASH     &kp X     &kp C     &kp V      &kp SEMI     &kp LANG2             &kp LANG1         &kp B        &kp H  &kp J  &kp K    &kp L
&sk LCTRL     &sk LALT  &sk LCMD  &lt 3 TAB  &lt 2 SPACE  &mt LSHIFT COMMA      &mt RSHFT PERIOD  &lt 1 ENTER                         &kp BSPC
            >;

            sensor-bindings = <&inc_dec_kp LG(MINUS) LG(EQUAL)>;
        };

        NUM {
            bindings = <
&kp LG(KP_N1)  &kp LG(KP_N2)  &kp LG(KP_N3)    &kp LG(KP_N4)  &kp LG(KP_N5)                              &none      &kp COMMA  &kp DOT    &kp BSPC   &kp DEL
&kp KP_N1      &kp KP_N2      &kp KP_NUMBER_3  &kp KP_N4      &kp KP_N5      &kp K_MUTE       &kp TILDE  &kp KP_N6  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_N0
&kp SLASH      &kp STAR       &kp MINUS        &kp PLUS       &kp COLON      &kp PERCENT      &trans     &kp EQUAL  &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT
&trans         &trans         &trans           &trans         &trans         &trans           &trans     &trans                                      &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        SIGN {
            bindings = <
&none          &kp QMARK  &none     &none     &none                             &none      &kp PIPE  &kp KP_MINUS  &kp LPAR  &kp RPAR
&kp EXCL       &kp AT     &kp HASH  &kp DLLR  &kp PRCNT  &trans      &kp TILDE  &kp CARET  &kp AMPS  &kp STAR      &kp LBKT  &kp RBKT
&kp BACKSLASH  &none      &none     &none     &kp COLON  &trans      &trans     &kp EQUAL  &kp LT    &kp GT        &kp LBRC  &kp RBRC
&trans         &trans     &trans    &trans    &trans     &trans      &trans     &trans                                       &trans
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                        &kp F1      &kp F2        &kp F3        &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13   &kp F6      &kp F7        &kp F8        &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &kp CAPS  &kp K_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans                                          &kp F12
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        BLUETOOTH {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        bluetooth {
            if-layers = <1 2>;
            then-layer = <6>;
        };
    };
};
